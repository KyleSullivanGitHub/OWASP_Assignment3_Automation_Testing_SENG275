Important INFO
Before running any tests, several things must be done.
First, download the ChromeDriver, FirefoxDriver and EdgeDriver Selenium needs to run tests. just search these names and you will find it.
Second, unzip these files into the same file somewhere on your computer.
in TestBrowser.java:
Change:
driverPath to the path directory  for the file with all your unzipped driver files
primaryBrowser to whatever browser you want to run the majority of the tests with.

Rememember, anytime you pull the file from the repository, someone else might have changed them, so make sure.


Creating A browser for test
1. Create a create Environment object for the class


common imports
    import Setup.*;
    import org.openqa.selenium.WebDriver;
    import org.testng.annotations.*;
    import java.io.IOException;


Common class setup
    String website = "https://juice-shop.herokuapp.com"; //default website URL
    TestBrowser environment;
    CreateEnvironment passBrowser = new CreateEnvironment();

    /**
     * Create an environment for all tests using the same browser app.
     * Programmer: Kyle Sullivan
     */
    @BeforeSuite
    public void SetUp() throws IOException
    {
        environment = passBrowser.createBrowser(TestBrowser.getPrimaryBrowser());
    }


Start Browser
(if you need to create different browsers for differnet web apps)
        TestBrowser browser = passBrowser.createBrowser(chosenBrowser);
        WebDriver browserWindow = browser.makeDriver();
        browserWindow.manage().window().maximize();
        browserWindow.get(website);

(if you need to create  browsers of the same web type)
        WebDriver browserWindow = environment.makeDriver()
        browserWindow.manage().window().maximize();
        browserWindow.get(website);

Close Browser Window. Use this rather than .quit if you have more tests to run.
        Thread.sleep(5000);
        browserWindow.close();

Close browser window, and driver.
    environment.quit();

Data provider class
    /**
     * Purpose
     * Programmer:
     * @return object containing...
     */
    @DataProvider(
            name = "",
            parallel = true
    )
    public static Object[][] RF1_Input()
    {
        String email = "";
        String password = "";
        String question = "";

        return new Object[][]{
                {email,password,question,"Firefox"},
                {email,password,question,"Chrome"},
                {email,password,question,"Edge"},
        };
    }


test Class
/**
 * purpose
 * Programmer
 * @param
 */
@Test(
    groups = {"",""},
    priority = 0,
    dataProvider = "",
    dataProviderClass = Test_Data.class,
    threadPoolSize = 0,
    enabled = true
)
public void __()
{
}

Common Selenium Commands
browserWindow.get(""); // go to a certian URL
browserWindow.getTitle();// gets the title of the webpage

WebElement __ = browserWindow.findElement(By. cssSelector("")); //create an object that is targeted at a specific element of the page. The string will typically be an 'id' value
__.isEnabled(); //returns true if the element is active, false if not

__.click(); //clicks on the element

__.sendKeys(""); //types the specific keyes
__.getAttribute("");// gets the attribute from the page source


__.getText(); //returns the text of the element.



**************************************
Kyle Path Setup
  //driver path to your folder contianing all drivers for web testing. Change to match your setup
    protected String driverPath = "C:\\Users\\Owner\\Documents\\WebDriver\\";
    //Location of firefox driver within your WebDriver folder.
    protected String fireFoxLoc = "geckodriver-v0.29.1-win64\\geckodriver.exe";
    //Location of chrome driver within your WebDriver folder.
    protected String chromeLoc = "chromedriver_win32\\chromedriver.exe";
    //Location of Edge driver within your webdriver folder.
    protected String edgeLoc = "edgedriver_win64\\msedgedriver.exe";




************************************************************************************************************************************************************

INITIAL TEST BROWSER CLASS (DO NOT CHANGE):


package Setup;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.safari.SafariDriver;

import java.io.IOException;
/**
 * TestBrowser Class
 * Programmer: Kyle Sullivan
 * Contains basic functions to allow a test to be called from any of three specific browser.
 */
public abstract class TestBrowser
{
    //driver path to your folder contianing all drivers for web testing. Change to match your setup
    protected String driverPath = "C:\\Users\\Owner\\Documents\\WebDriver\\";
    //Location of firefox driver within your WebDriver folder.
    protected String fireFoxLoc = "geckodriver-v0.29.1-win64\\geckodriver.exe";
    //Location of chrome driver within your WebDriver folder.
    protected String chromeLoc = "chromedriver_win32\\chromedriver.exe";
    //Location of Edge driver within your webdriver folder.
    protected String edgeLoc = "edgedriver_win64\\msedgedriver.exe";
    //Location of Safari driver within your webdriver folder.
    protected String safariLoc = "/usr/bin/safaridriver";

    //preferred driver to run all tests on. Change to whatever suits your fancy
    static String primaryBrowser = "Chrome";

    //String containing driver text
    String driver;
    //String containg driver location
    String driverLoc;

    public TestBrowser() throws IOException {}

    /**
     * Used by CreateEnvironment to default to a specific browser for the majority of tests.
     * Programmer: Kyle Sullivan
     * @return driver A string containing the default browser for tests
     */
    public static String getPrimaryBrowser() { return primaryBrowser; }

    /**
     * Used by CreateEnvironment to create the test Environment.
     * Programmer: Kyle Sullivan
     * @return driver A string containing the initialization text to create the environment
     */
    public String getDriver() { return driver; }
    /**
     * Used by CreateEnvironment to create the test Environment.
     * Programmer: Kyle Sullivan
     * @return driverLoc A string containing the location text of the driver to create the environment
     */
    public String getDriverLoc() {return driverLoc;}

    /**
     * Abstract class for returning a usable web environment.
     * Programmer: Kyle Sullivan
     */
    public abstract WebDriver makeDriver();
}

class useFireFox extends TestBrowser
{
    /**
     * Sets the driver type and path for a firefox browser
     * Programmer: Kyle Sullivan
     */
    public useFireFox() throws IOException
    {
        this.driver = "webdriver.gecko.driver";
        this.driverLoc = this.driverPath + fireFoxLoc;
    }

    /**
     * Creates and returns a new  Firefox browser window.
     * Programmer: Kyle Sullivan
     * @return FirefoxDriver() - The initialized browser for the given test
     */
    public WebDriver makeDriver()
    {
        return new FirefoxDriver();
    }
}

class useChrome extends TestBrowser
{
    /**
     * Sets the driver type and path for a chrome browser
     * Programmer: Kyle Sullivan
     */
    public useChrome() throws IOException
    {
        this.driver = "webdriver.chrome.driver";
        this.driverLoc = this.driverPath + chromeLoc;
    }

    /**
     * Creates and returns a new Google Chrome browser window.
     * Programmer: Kyle Sullivan
     * @return ChromeDriver() - The initialized browser for the given test
     */
    public WebDriver makeDriver()
    {
        return new ChromeDriver();
    }
}

class useEdge extends TestBrowser
{
    /**
     * Sets the driver type and path for an edge browser
     * Programmer: Kyle Sullivan
     */
    public useEdge() throws IOException
    {
        this.driver = "webdriver.edge.driver";
        this.driverLoc = this.driverPath + edgeLoc;
    }

    /**
     * Creates and returns a new  Edge browser window.
     * Programmer: Kyle Sullivan
     * @return EdgeDriver() - The initialized browser for the given test
     */
    public WebDriver makeDriver()
    {
        return new EdgeDriver();
    }
}

class useSafari extends TestBrowser
{
    /**
     * Sets the driver type and path for a Safari browser
     * Programmer: Seyedmehrad Adimi
     */
    public useSafari() throws IOException
    {
        this.driver = "webdriver.safari.driver";
        this.driverLoc = this.driverPath + safariLoc;
    }

    /**
     * Creates and returns a new Safari browser window.
     * Programmer: Seyedmehrad Adimi
     * @return SafariDriver() - The initialized browser for the given test
     */
    public WebDriver makeDriver()
    {
        return new SafariDriver ();
    }
}

**********************************************************************************************************************************





